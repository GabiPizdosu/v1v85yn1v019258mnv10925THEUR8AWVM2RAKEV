-- Load Orion library
local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()
local Window = OrionLib:MakeWindow({Name = "The Rake Remastered", HidePremium = false, SaveConfig = false, IntroText = "The Rake Remastered", ConfigFolder = "da reik config"})

-- Values
local player = game.Players.LocalPlayer
local isESPActive = true
_G.InfStamina = true

-- Functions

function hookInfiniteStamina()
    while _G.InfStamina do
        for _, v in pairs(getloadedmodules()) do
            if v.Name == "M_H" then
                local module = require(v)
                local old;
                old = hookfunction(module.TakeStamina, function(smth, amount)
                    if amount > 0 then
                        return old(smth, -0.5)
                    end
                    return old(smth, amount)
                end)
            end
            wait(0.040)
        end
    end
end


game:GetService("RunService").Heartbeat:Connect(function()
    if isESPActive then
        local playerPosition = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
        if playerPosition then
            playerPosition = playerPosition.Position
            findAndUpdateTextLabelAboveRakeModel(playerPosition)
        end
    end
end)

-- Flare Gun ESP

local function checkFlareGunPickup()
    while _G.FlareGunEsp do
        local flareGunPickup = Workspace:FindFirstChild("FlareGunPickUp")

        if flareGunPickup then
            local flareGunHighlight = flareGunPickup:FindFirstChild("FlareGunHighlight")
            local flareGunBillboard = flareGunPickup:FindFirstChild("FlareGunBillboardGui")

            if not flareGunHighlight then
                flareGunHighlight = Instance.new("SelectionBox")
                flareGunHighlight.Color3 = Color3.new(1, 0, 0)
                flareGunHighlight.Transparency = 0.5
                flareGunHighlight.SurfaceTransparency = 0.5
                flareGunHighlight.LineThickness = 0.05
                flareGunHighlight.Name = "FlareGunHighlight"
                flareGunHighlight.Parent = flareGunPickup
            end

            if not flareGunBillboard then
                flareGunBillboard = Instance.new("BillboardGui")
                flareGunBillboard.Size = UDim2.new(0, 200, 0, 50)
                flareGunBillboard.StudsOffset = Vector3.new(0, 10, 0)
                flareGunBillboard.AlwaysOnTop = true

                local textLabel = Instance.new("TextLabel")
                textLabel.Size = UDim2.new(1, 0, 1, 0)
                textLabel.TextColor3 = Color3.new(1, 1, 1)
                textLabel.BackgroundTransparency = 1
                textLabel.Font = Enum.Font.SourceSansBold
                textLabel.Text = "Flare Gun"

                textLabel.Parent = flareGunBillboard

                flareGunBillboard.Name = "FlareGunBillboardGui"
                flareGunBillboard.Adornee = flareGunPickup
                flareGunBillboard.Parent = flareGunPickup
            end
        end

        if not flareGunPickup:IsA("Model") or not flareGunPickup.Parent or flareGunPickup.Parent:IsA("Model") then
            return
        end

        local flareGunNotificationShown = flareGunPickup:FindFirstChild("FlareGunNotificationShown")

        if not flareGunNotificationShown then
            StarterGui:SetCore("SendNotification", {
                Title = "Flare Gun Spotted!",
                Text = "The 'FlareGunPickUp' model has spawned.",
                Duration = 5
            })
            flareGunNotificationShown = Instance.new("BoolValue")
            flareGunNotificationShown.Name = "FlareGunNotificationShown"
            flareGunNotificationShown.Parent = flareGunPickup
        end
    end
end

-- Variable to control the loop
game:GetService("RunService").Heartbeat:Connect(function()
    if isESPActive then
        checkFlareGunPickup()
    end
end)

-- Points Giver

function PointsGiver()
    local args = {
        [1] = "SellScraps",
        [2] = "Scraps"
    }

    game:GetService("ReplicatedStorage").ShopEvent:FireServer(unpack(args))
end

-- Tabs

local Main = Window:MakeTab({
    Name = "Main",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

local ESP = Window:MakeTab({
    Name = "esp",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

local PointsGiverTab = Window:MakeTab({
    Name = "Points Giver",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

-- Text Labels

PointsGiverTab:AddLabel("How to use:")
PointsGiverTab:AddLabel("You need scrap, at least 1, then press button")
PointsGiverTab:AddLabel("Tip: Use the Bring Scrap button in Scrap tab!")

-- Buttons

PointsGiverTab:AddButton({
    Name = "Give Points",
    Callback = PointsGiver
})

ESP:AddButton({
    Name = "The Rake",
    Callback = function()
       -- Rake ESP

local Workspace = game:GetService("Workspace")
local StarterGui = game:GetService("StarterGui")

local billboardGui = Instance.new("BillboardGui")
billboardGui.Size = UDim2.new(0, 200, 0, 100)
billboardGui.StudsOffset = Vector3.new(0, 10, 0)
billboardGui.AlwaysOnTop = true

local textLabel = Instance.new("TextLabel")
textLabel.Size = UDim2.new(1, 0, 1, 0)
textLabel.TextColor3 = Color3.new(1, 1, 1)
textLabel.BackgroundTransparency = 1
textLabel.Font = Enum.Font.SourceSansBold

textLabel.Parent = billboardGui

local selectionBox = Instance.new("SelectionBox")
selectionBox.Color3 = Color3.new(0, 0, 1)
selectionBox.Transparency = 0.5
selectionBox.SurfaceTransparency = 0.5
selectionBox.LineThickness = 0.05
selectionBox.Adornee = Instance.new("Part")

local isNotificationShown = false
local isSearchingNotificationShown = false
local startTime = tick()
local searchingNotificationDelay = 20

local function calculateDistance(point1, point2)
    return (point1 - point2).Magnitude
end

local function findAndUpdateTextLabelAboveRakeModel(playerPosition)
    while _G.RakeEsp do
        local rakeModel = Workspace:FindFirstChild("Rake")

        if rakeModel then
            local rakePosition = rakeModel.PrimaryPart.Position
            local distance = calculateDistance(playerPosition, rakePosition)

            local health = 0
            local humanoid = rakeModel:FindFirstChildOfClass("Humanoid")
            if humanoid then
                health = humanoid.Health
            end

            textLabel.Text = string.format("Rake\n%.1f meters away\nHealth: %d", distance, health)
            billboardGui.Adornee = rakeModel.PrimaryPart
            billboardGui.Parent = rakeModel

            selectionBox.Parent = rakeModel
            selectionBox.Adornee = rakeModel.PrimaryPart

            if not isNotificationShown then
                StarterGui:SetCore("SendNotification", {
                    Title = "ESP Activated!",
                    Text = string.format("The 'Rake' model was found. Distance: %.1f meters", distance),
                    Duration = 5
                })
                isNotificationShown = true
            end

            return true
        else
            selectionBox.Parent = nil

            if not isSearchingNotificationShown and tick() - startTime > searchingNotificationDelay then
                StarterGui:SetCore("SendNotification", {
                    Title = "Searching...",
                    Text = "The 'Rake' model was not found. Retrying...",
                    Duration = 3
                })
                isSearchingNotificationShown = true
            end

            return false
        end
    end
end
end
})

game:GetService("RunService").Heartbeat:Connect(function()
    if isESPActive then
        local playerPosition = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
        if playerPosition then
            playerPosition = playerPosition.Position
            findAndUpdateTextLabelAboveRakeModel(playerPosition)
        end
    end
end)






Main:AddButton({
    Name = "Infinite Stamina",
    Callback = function (Value)
        _G.InfStamina = Value
        hookInfiniteStamina()
    end
})

ESP:AddButton({
    Name = "Flare Gun",
    Callback = checkFlareGunPickup
})

-- Initialization

OrionLib:Init()
