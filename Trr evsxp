local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local StarterGui = game:GetService("StarterGui")

-- Reference to the LocalPlayer for distance calculation
local player = Players.LocalPlayer

-- Create the BillboardGui and TextLabel for "Rake"
local rakeBillboardGui = Instance.new("BillboardGui")
rakeBillboardGui.Size = UDim2.new(0, 200, 0, 100)
rakeBillboardGui.StudsOffset = Vector3.new(0, 10, 0)
rakeBillboardGui.AlwaysOnTop = true

local rakeTextLabel = Instance.new("TextLabel")
rakeTextLabel.Size = UDim2.new(1, 0, 1, 0)
rakeTextLabel.TextColor3 = Color3.new(1, 1, 1)
rakeTextLabel.BackgroundTransparency = 1
rakeTextLabel.Font = Enum.Font.SourceSansBold

rakeTextLabel.Parent = rakeBillboardGui

-- Function to update the TextLabel above the "Rake" model
local function updateRakeTextLabel(rakeModel, distance, health, targetVal)
    rakeTextLabel.Text = string.format("Rake\n%.1f meters away\nHealth: %d\nTarget: %s", distance, health, targetVal)
    rakeBillboardGui.Adornee = rakeModel.PrimaryPart
    rakeBillboardGui.Parent = rakeModel
end

-- Function to calculate the distance between two points
local function calculateDistance(point1, point2)
    return (point1 - point2).Magnitude
end

-- Function to check for the presence of the "Rake" model in Workspace and update the TextLabel
local function findAndUpdateTextLabelAboveRakeModel(playerPosition)
    local rakeModel = Workspace:FindFirstChild("Rake")

    if rakeModel then
        local rakePosition = rakeModel.PrimaryPart.Position
        local distance = calculateDistance(playerPosition, rakePosition)

        -- If the model has a Humanoid, get its health
        local health = 0
        local humanoid = rakeModel:FindFirstChildOfClass("Humanoid")
        if humanoid then
            health = humanoid.Health
        end

        -- Update the TextLabel above the "Rake" model
        updateRakeTextLabel(rakeModel, distance, health, rakeModel.TargetVal or "No Target")

        return true  -- Model found
    else
        return false  -- Model not found
    end
end

-- Variable to control the loop
local isESPActive = true

-- Loop to continuously check and update the TextLabel above the "Rake" model's head
while isESPActive do
    local playerPosition = player.Character and player.Character:WaitForChild("HumanoidRootPart").Position or Vector3.new()
    
    if not findAndUpdateTextLabelAboveRakeModel(playerPosition) then
        wait(1)  -- Adjust the wait time as needed to avoid excessive checks and reduce performance impact
    else
        wait(1)  -- Wait before refreshing the distance
    end
end
