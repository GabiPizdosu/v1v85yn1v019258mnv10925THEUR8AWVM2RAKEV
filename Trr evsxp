local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local StarterGui = game:GetService("StarterGui")

-- Function to create or update the TextLabel above the "Rake" model's head
local function updateTextLabelAboveRakeModel(rakeModel, distance, health)
    local billboardGui = rakeModel:FindFirstChild("ESPBillboardGui")

    if not billboardGui then
        billboardGui = Instance.new("BillboardGui")
        billboardGui.Name = "ESPBillboardGui"
        billboardGui.Adornee = rakeModel.PrimaryPart  -- Assuming the model has a PrimaryPart set
        billboardGui.Size = UDim2.new(0, 200, 0, 100)
        billboardGui.StudsOffset = Vector3.new(0, 10, 0)  -- Adjust the height above the head
        billboardGui.AlwaysOnTop = true  -- Display above all other GUI elements, including walls

        local textLabel = Instance.new("TextLabel")
        textLabel.Name = "ESPTextLabel"
        textLabel.Size = UDim2.new(1, 0, 1, 0)
        textLabel.TextColor3 = Color3.new(1, 1, 1)  -- Bright white color
        textLabel.BackgroundTransparency = 1
        textLabel.Font = Enum.Font.SourceSansBold  -- Optional: Set font to bold

        textLabel.Parent = billboardGui
        billboardGui.Parent = rakeModel
    end

    local textLabel = billboardGui:FindFirstChild("ESPTextLabel")
    if textLabel then
        textLabel.Text = string.format("Rake\n%.1f meters away\nHealth: %d", distance, health)
    end
end

-- Function to calculate the distance between two points
local function calculateDistance(point1, point2)
    return (point1 - point2).Magnitude
end

-- Function to check for the presence of the "Rake" model in Workspace and update the TextLabel
local function findAndUpdateTextLabelAboveRakeModel(playerPosition)
    local rakeModel = Workspace:FindFirstChild("Rake")

    if rakeModel then
        local rakePosition = rakeModel.PrimaryPart.Position
        local distance = calculateDistance(playerPosition, rakePosition)

        -- If the model has a Humanoid, get its health
        local health = 0
        local humanoid = rakeModel:FindFirstChildOfClass("Humanoid")
        if humanoid then
            health = humanoid.Health
        end

        updateTextLabelAboveRakeModel(rakeModel, distance, health)
        StarterGui:SetCore("SendNotification", {
            Title = "ESP Activated!",
            Text = string.format("The 'Rake' model was found. Distance: %.1f meters", distance),
            Duration = 5
        })
        return true  -- Model found
    else
        StarterGui:SetCore("SendNotification", {
            Title = "Searching...",
            Text = "The 'Rake' model was not found. Retrying...",
            Duration = 5
        })
        return false  -- Model not found
    end
end

-- Variable to control the loop
local isESPActive = true

-- Reference to the LocalPlayer for distance calculation
local player = Players.LocalPlayer

-- Loop to continuously check and update the TextLabel above the "Rake" model's head
while isESPActive do
    local playerPosition = player.Character and player.Character:WaitForChild("HumanoidRootPart").Position or Vector3.new()
    
    if not findAndUpdateTextLabelAboveRakeModel(playerPosition) then
        wait(1)  -- Adjust the wait time as needed to avoid excessive checks and reduce performance impact
    else
        wait(1)  -- Wait before refreshing the distance
    end
end
